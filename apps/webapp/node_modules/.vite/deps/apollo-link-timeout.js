import {
  core_exports,
  init_core
} from "./chunk-RMSZNEKM.js";
import "./chunk-3XRNN35L.js";
import "./chunk-4GZRJ6XO.js";
import "./chunk-SLCLQLWM.js";
import {
  __commonJS,
  __toCommonJS
} from "./chunk-2LSFTFF7.js";

// ../../node_modules/.pnpm/apollo-link-timeout@4.0.0_@apollo+client@3.9.11/node_modules/apollo-link-timeout/lib/TimeoutError.js
var require_TimeoutError = __commonJS({
  "../../node_modules/.pnpm/apollo-link-timeout@4.0.0_@apollo+client@3.9.11/node_modules/apollo-link-timeout/lib/TimeoutError.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || function() {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var TimeoutError = (
      /** @class */
      function(_super) {
        __extends(TimeoutError2, _super);
        function TimeoutError2(message, timeout, statusCode) {
          if (statusCode === void 0) {
            statusCode = 408;
          }
          var _this = _super.call(this, message) || this;
          _this.timeout = timeout;
          _this.statusCode = statusCode;
          return _this;
        }
        return TimeoutError2;
      }(Error)
    );
    exports.default = TimeoutError;
  }
});

// ../../node_modules/.pnpm/apollo-link-timeout@4.0.0_@apollo+client@3.9.11/node_modules/apollo-link-timeout/lib/timeoutLink.js
var require_timeoutLink = __commonJS({
  "../../node_modules/.pnpm/apollo-link-timeout@4.0.0_@apollo+client@3.9.11/node_modules/apollo-link-timeout/lib/timeoutLink.js"(exports) {
    var __extends = exports && exports.__extends || function() {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (b.hasOwnProperty(p))
            d[p] = b[p];
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign = exports && exports.__assign || Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var core_1 = (init_core(), __toCommonJS(core_exports));
    var TimeoutError_1 = require_TimeoutError();
    var DEFAULT_TIMEOUT = 15e3;
    var TimeoutLink = (
      /** @class */
      function(_super) {
        __extends(TimeoutLink2, _super);
        function TimeoutLink2(timeout, statusCode) {
          var _this = _super.call(this) || this;
          _this.timeout = timeout || DEFAULT_TIMEOUT;
          _this.statusCode = statusCode;
          return _this;
        }
        TimeoutLink2.prototype.request = function(operation, forward) {
          var _this = this;
          var controller;
          var requestTimeout = operation.getContext().timeout || this.timeout;
          if (typeof AbortController !== "undefined") {
            var context = operation.getContext();
            var fetchOptions = context.fetchOptions || {};
            controller = fetchOptions.controller || new AbortController();
            fetchOptions = __assign({}, fetchOptions, { controller, signal: controller.signal });
            operation.setContext({ fetchOptions });
          }
          var chainObservable = forward(operation);
          var operationType = operation.query.definitions.find(function(def) {
            return def.kind === "OperationDefinition";
          }).operation;
          if (requestTimeout <= 0 || operationType === "subscription") {
            return chainObservable;
          }
          var localObservable = new core_1.Observable(function(observer) {
            var timer;
            var subscription = chainObservable.subscribe(function(result) {
              clearTimeout(timer);
              observer.next(result);
              observer.complete();
            }, function(error) {
              clearTimeout(timer);
              observer.error(error);
              observer.complete();
            });
            timer = setTimeout(function() {
              if (controller) {
                controller.abort();
                var context2 = operation.getContext();
                var fetchOptions2 = context2.fetchOptions || {};
                if (fetchOptions2.controller === controller && fetchOptions2.signal === controller.signal) {
                  fetchOptions2 = __assign({}, fetchOptions2, { controller: null, signal: null });
                  operation.setContext({ fetchOptions: fetchOptions2 });
                }
              }
              observer.error(new TimeoutError_1.default("Timeout exceeded", requestTimeout, _this.statusCode));
              subscription.unsubscribe();
            }, requestTimeout);
            var ctxRef = operation.getContext().timeoutRef;
            if (ctxRef) {
              ctxRef({
                unsubscribe: function() {
                  clearTimeout(timer);
                  subscription.unsubscribe();
                }
              });
            }
            return function() {
              clearTimeout(timer);
              subscription.unsubscribe();
            };
          });
          return localObservable;
        };
        return TimeoutLink2;
      }(core_1.ApolloLink)
    );
    exports.default = TimeoutLink;
  }
});
export default require_timeoutLink();
//# sourceMappingURL=apollo-link-timeout.js.map
